omg: 1
lifecycle:
  startup:
    command: ["pagerduty"]
info:
  version: 1.0.0
  title: Pagerduty Incident 
  description: This is to create, update and resolve incidents on PagerDuty
  contact:
    name: Rohit Shetty
    url: https://github.com/heaptracetechnology/pagerduty
    email: rohits@gmail.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT 
actions:
  createincident:
    help: Create an incident, on success return the creted incident detail, on fail return reason and status code. example of response: {"type":"incident","summary":"incident title","incident_number":5,"created_at":"2019-02-14T16:09:19Z","service":{"service_detail":""},"assignments":[{"agginments_detail"}],"last_status_change_at":"2019-02-14T16:09:19Z","teams":[{"id":"PV4FUUH","type":"team_reference"}],"urgency":"high","status":"triggered","id":"PXNDS3C","priority":{}}
    arguments:
      from:
        type: string
        in: query
        required: true
        help: The email address of a valid user associated with the account making the request
      incident:
        type: object
        in: requestBody
        required: true
        help: Incident detail for creation.
    http:
      port: 5000
      method: post
      path: /incidents
      contentType: application/json
    output:
      type: map
  getincident:
    help: Show detailed information about an incident. response example: {"type":"incident","summary":"[#1] Email sending has not working","incident_number":1,"created_at":"2019-02-13T14:08:04Z","incident_key":"70d6b5aa29494af387ff7b9fa2d2fe0","service":{"summary":"Email Service"},"last_status_change_at":"2019-02-13T14:08:04Z","urgency":"high","status":"triggered","id":"PI5OC0Z","priority":{}} 
    arguments:
      id:
        type: string
        in: path
        required: true
        help: Incident id to get incident detail.
    http:
      port: 5000
      method: get
      path: /incidents/{{id}}
      contentType: application/json
    output:
      type: map
  listincidents:
    help: List existing incidents. response example: {"incidents":[{"type":"incident","summary":"[#1] Email sending has not working","incident_number":1,"created_at":"2019-02-13T14:08:04Z","incident_key":"70d6b5aa29494af387ff7b9fa2d2fe0","service":{"summary":"Email Service"},"last_status_change_at":"2019-02-13T14:08:04Z","urgency":"high","status":"triggered","id":"PI5OC0Z","priority":{}},{"type":"incident","summary":"[#2] Incident created from service exec command","incident_number":2,"created_at":"2019-02-13T14:26:19Z","service":{"summary":"Email Service"},"urgency":"high","status":"triggered","id":"PORGNBD","priority":{}}]}
    arguments:
      timezone:
        type: string
        in: query
        help: The timezone code
      since:
        type: string
        in: query
        help: The start of the date
      until:
        type: string
        in: query
        help: The end of the date
      date_range:
        type: string
        in: query
        help: start and end date range
      incident_key:
        type: string
        in: query
        help: search with incident key
      statuses:
        type: list
        in: query
        help: Return only incidents with the given statuses
      serviceids:
        type: list
        in: query
        help: Returns only the incidents associated with the passed service
      userIds:
        type: list	
        in: query
        help: Returns only the incidents currently assigned to the passed user
    http:
      port: 5000
      method: get
      path: /listincidents
      contentType: application/json
    output:
      type: map
  getincidentnotes:
    help: List existing incident notes.
    arguments:
      id:
        type: string
        in: path
        required: true
        help: Id of the incident.
    http:
      port: 5000
      method: get
      path: /incidents/{{id}}/notes
      contentType: application/json
    output:
      type: map
  listservices:
    help: Get list existing services. response example: {"Limit":25,"Offset":0,"More":false,"Total":0,"Services":[{"id":"PY1XJKQ","type":"service","summary":"Email Service","name":"Email Service","description":"This service was created during onboarding on February 13, 2019.","status":"critical","teams":[{"type":"team_reference","summary":"Rohit"}],"alert_creation":"create_alerts_and_incidents"}]}
    arguments:
      serviceoptions:
        type: object
        in: requestBody
        required: true
        help: service options for filter service as per option.
    http:
      port: 5000
      method: post
      path: /services
      contentType: application/json
    output:
      type: map
  getservice:
    help: Get details about an existing service. response example: {"id":"PY1XJKQ","type":"service","summary":"Email Service","name":"Email Service","description":"This service was created during onboarding on February 13, 2019.","status":"critical","teams":[{"type":"team_reference","summary":"Rohit"}],"alert_creation":"create_alerts_and_incidents"}
    arguments:
      id:
        type: string
        in: path
        required: true
        help: Id of the service
      serviceoptions:
        type: object
        in: requestBody
        required: true
        help: service options for filter service as per option.
    http:
      port: 5000
      method: post
      path: /services/{{id}}
      contentType: application/json
    output:
      type: map
environment:
  ACCESS_TOKEN:
    type: string
    pattern: "[a-zA-Z0-9_-]*$"
    required: true
    help: basic athorization token.

